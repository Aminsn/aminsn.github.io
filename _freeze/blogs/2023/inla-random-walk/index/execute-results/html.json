{
  "hash": "37727a7f7696a857fd7d6f5fd92d6061",
  "result": {
    "markdown": "---\ntitle: \"Modeling Non-linear Effects using Random Walk in R-INLA\"\ndescription: \"A guide to modeling non-linear effects using random walk with the R-INLA package.\"\nauthor: \"Amin Shoarinejad\"\ndate: \"2023-08-06\"\ncategories: [R, Bayesian Statistics, INLA, Random Walk]\n\n# Execution options\nexecute: \n  freeze: true\n---\n\n\n<style>\npre.sourceCode {\n  background-color: #F0F0F0;\n}\n</style>\n\n\nRandom walk models can be very useful for modeling non-linear effects in statistical analysis. In this post, we will explore how to use the Integrated Nested Laplace Approximation (INLA) method with a random walk model in R to show how to model non-linear relationships. \n\n# Requirements \nWe'll need to load the INLA library in R. If you don't have R-INLA installed, you can follow the instructions [here](https://www.r-inla.org/download-install) to install it.\n\n\n# Random Walk: A Brief Overview\nImagine a stock price that moves daily. You might think today's price is the best predictor of tomorrow's price, with some random fluctuation added. This idea is central to a random walk model. Mathematically, this can be expressed as:\n\n$$P_{t}  = P_{t-1} + \\epsilon_{t}$$\nwhere:\n\n- $P_{t}$ is the price at time $t$. \n- $\\epsilon_{t}$ is a random error term at time $t$, typically assumed to be normally distributed with mean 0. \n\nThis model suggests that the change in value from one time point to the next is purely random, and historical changes don't forecast future ones.\n\n# Using Random Walk to Model Non-Linearity\nWhile random walks are mostly used in time series analysis (like in the stock price example) but the idea could be easily applied to problems where there is no time dimension. In the following example we will see how we can use random walk to recover a non-linear relationship between two continuous variables. \n\nSuppose `x` is continuous and uniformly distributed between [-100, 100], represented as:\n\n$$x \\sim \\text{Uniform}(-100, 100)$$\n\nWe then describe `y` as follows: \n\n$$y = f(x) + \\epsilon$$\nwhere $f(x)$ represents a non-linear function, and $\\epsilon$ is the error term. For this example:\n\n$$f(x) = \\frac{1}{1+e^{-0.1x}}$$\n$$\\epsilon \\sim N(0, 0.3^2)$$\n\nWe will use R to simulate data according to the above specifications:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# define the sigmoid function\nsigmoid = function(x){1/(1+exp(-x))}\n\n# simulate data\nN = 100 # num of observations\nset.seed(1)\nx = sort(runif(N, -100 , 100)) # sort for line plot\neps = rnorm(N,0,0.05) \nfx = sigmoid(.1*x)\ny = fx + eps\n\ndf = data.frame(x=x, y=y, fx = fx)\n\n# plotting the data\nggplot(df, aes(x,y)) + \n  geom_point() + \n  geom_line(aes(x,fx), color = 'red') + \n  theme_classic() + \n  theme(\n    panel.background = element_rect(fill = \"#FDFBF7\"),\n    plot.background = element_rect(fill = \"#FDFBF7\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    text = element_text(family = \"Comic Sans MS\")\n  ) + \n  labs(x = 'X', y = 'Y', title = 'Scatter plot of x vs y and the true underlying function')\n```\n\n::: {.cell-output-display}\n![](figs/unnamed-chunk-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nThe red line in the plot above shows the target function we're aiming to infer from the data.\n\n# Inference\n\nTo infer the true relationship, we can model the data generating process using a random walk. To do so, first we need to discretize `x` into $k$ bins to get ${x_{1},...,{x_{k}}}$ discrete points (more on binning [here](https://en.wikipedia.org/wiki/Data_binning)). We then define our model as follows: \n\n$$y_{i} \\sim N(\\beta_{x_{i}}, \\sigma^2)$$\n$$\\beta_{x_{i}} \\sim N(\\beta_{x_{i-1}}, \\sigma_{f}^2)$$\n\nwhere $E(y_{i}) = \\beta_{x_{i}}$ and $E(\\beta_{x_{i}}) = \\beta_{x_{i-1}}$. After defining the model, we must decide on the inference method, such as MLE, MCMC, etc. In this case, we employ the Laplace approximation using INLA. It's important to note that INLA adopts a Bayesian approach, which requires us to define priors for our model parameters. For this example, we'll stick with INLA's default settings. To learn more about them, simply use the `inla.doc(\"model_name\")` command, for example, `inla.doc(\"rw1\")` for the random walk model.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(INLA)\n\n# binning the predictor\ndf$x_binned = inla.group(df$x, n = 10, method = \"cut\")\n\n# model definition\nformula = y ~ -1 + f(x_binned, model = 'rw1', constr=FALSE)\n\n# fitting the model\nmodel = inla(formula, data = df)\n\n# extracting the estimated effects\nbin_center = model$summary.random$x_binned$ID\nmean = model$summary.random$x_binned$mean\nlower = model$summary.random$x_binned$`0.025quant`\nupper = model$summary.random$x_binned$`0.975quant`\n\ndf_pred = data.frame(bin_center, mean, lower, upper)\n\nggplot() + \n  geom_ribbon(data = df_pred, \n              aes(x = bin_center, ymin = lower, ymax = upper), \n              fill = \"grey70\", alpha = 0.6) + \n  geom_point(data = df, aes(x,y)) + \n  theme_classic() + \n  geom_line(data = df_pred, aes(bin_center, mean), color ='red') + theme(\n    panel.background = element_rect(fill = \"#FDFBF7\"),\n    plot.background = element_rect(fill = \"#FDFBF7\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    text = element_text(family = \"Comic Sans MS\")\n  ) + \n  labs(x = 'X', y = 'Y', title = 'Scatter plot of x vs y and the fitted function')\n```\n\n::: {.cell-output-display}\n![](figs/unnamed-chunk-4.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nAs you can see in the plot above, the estimated function, represented in red, provides a good approximation of the true function. This suggests that the random walk model effectively captures the original function.\n\n# Quick Recap\n\n- **Random Walk Model:** A simple yet effective model that assumes the change in value from one time point to the next is purely random.\n\n- **Application Beyond Time Series:** Though commonly associated with time series data, the random walk model can be applied to scenarios without a time dimension.\n\n- **Practical Implementation:** We provided a simple example where we simulated data based on a given relationship and then used the random walk approach with INLA to recover the original relationship from the data.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}